---
output:
  html_document: default
  word_document: default
---
author: "ejakait" date: "8-9-2025" output: word_document: number_sections: true editor_options: markdown: wrap: 72

#bibliography: Senegal_SCH.bib #link-citations: true


1. Signs (Comparison Operators)
These are like questions you ask your data and R answers TRUE or FALSE
Sign	Meaning	Example	Result
==	Equals to	5 == 5	TRUE
!=	Not equal to	5 != 3	TRUE
>	Greater than	7 > 2	TRUE
<	Less than	4 < 6	TRUE
>=	Greater than or equal to	5 >= 5	TRUE
<=	Less than or equal to	3 <= 3	TRUE

#create a vector of ages of students

```{r}
age <- c(15, 20, 25)
```

Who is older than 18?
 
```{r}
age > 18
```
```{r}
# Who is younger than 30?
age < 30 
```

Operators
These are used to combine questions, like asking more than one question at once
Sign	Meaning	Example	Result
&	AND - Both conditions must be TRUE	(5 > 3) & (2 < 4)	TRUE
|	OR - At least one condition must be TRUE	
(5>10)|(2<4)


3. if

```{r}
a <- 30
b <- 20

if (b > a) {
  print("b is greater than a")
}
```



4. else if - you are telling R that if the previous conditions 
were not true, then try this other condition

```{r}
a <- 30
b <- 30

if (b > a){
  print("b is greater than a")
} else if (a == b){
  print("b is equal to a")
}
```

```{r}
age <- 16

if (age >= 18) {
  print("Adult")
} else if (age >= 13) {
  print("Teenager")
} else {
  print("Child")
}
```

else statement
Used to specify what should happen when all previous if or else if conditions are FALSE

```{r}
a <- 30
b <- 220

if (b < a) {
  print("b is less than a")
}  else{
  print("b is greater than a")
}
```

```{r}
age <- 10

if (age >= 18) {
  print("Adult")
} else if (age >= 13) {
  print("Teenager")
} else {
  print("Child")
}
```

# Loops in R

This is a way to repeat a set of instructions multiple times without writing the same code again and again/ perform iterations
it saves time, reduces errors, and produces a readable code

In R we have two primary loops; for and while

## For loop
This is used when you want to repeat over a sequence or list

```{r}
for(x in 1:10){
  print(x)
}
```

You can nest if…else statements in for loops

```{r}
dice <- 1:10
for(x in dice){
  if (x == 6){
    print(paste("The dice is", x, "football"))
  } else{
    print(paste("The dice is", x, "not football"))
  }
}
```

## While loop
This is used to repeat as long a condition is TRUE

```{r}
i <- 1
while(i < 6){
  print(i)
  i <- i+1
}
```

we can combine while loop with if…else statement

```{r}
#create a while loop that prints `play a game football` if the player number is 6
player <- 1
while(player <= 6){
  if (player < 6){
    print("No football")
  }else{
    print("play a game football")
  }
  player <- player + 1
}
```

# Function in R

A function is an object that has many related statements, accepts input, and gives out an outcome
You can pass data called parameters into a function
It is used to automate tasks

## User-defined functions
You write these yourself for tasks you do often
You will use function() to create

```{r}
my_function <- function(){
  print("hello")
}
my_function()
```

```{r}
# A function to add two numbers
add_numbers <- function(a, b) {
  result <- a + b
  return(result)
}

add_numbers(5, 3)   # → 8
```

```{r}
# Function to check if someone is an adult or minor
check_age <- function(age) {
  if (age >= 18) {
    return("Adult")
  } else {
    return("Minor")
  }
}

check_age(20)   # → "Adult"
```

```{r}
check_age(15)   # → "Minor"
```

When you create a function in R, you can have either local or global variables
Local variables: exist only inside the function, are forgotten after the function finishes
Global variables: exist outside the function. Functions can read them Note: If you create a variable inside a function, it’s local by default

```{r}
#y is local variable

add_five <- function(x) {
  y <- x + 5   
  return(y)
}

add_five(10)  
```

```{r}
#y is local variable
#let us confirm if y is actually a local variable by calling it outside the function
add_five <- function(x) {
  y <- x + 5   
  return(y)
}

add_five(10)  
```

```{r}
#global variable
#z is a global variable

z <- 100    

multiply <- function(x) {
  result <- x * z  
  return(result)
}

multiply(2)   
```


## Built-in Functions

These are in base R, you just need to call and use them

```{r}
# create a vector of numbers 1 to 10
a1 <- 1:10

#add the numbers in the vector
sum(a1)       
```

```{r}
#obtain the mean/ average of the numbers
mean(a1)     
```

```{r}
#get the square root of each number in the vector
sqrt(a1)      
```

# Session 4
installation of packages

## install packages

```{r}
library(tidyverse)
```

install AMR package

```{r}
#install.packages("AMR")

library(AMR)
```

## data

-we have in-built data sets and we can also load our own

### in-built datasets
- we use the function data() to see the list of datasets in base R

```{r}
data()
```

- some datasets need packages to access

```{r}
#accessing iris data from the R datasets
iris
```

### Loading data from computer

- First set your working directory using setwd() or 
get your working directory using getwd()

-We can have data in .csv or .xlsx

## load .csv file

```{r}
d1 <- read.csv("Data/dataset_class4.csv")
```

# manipulate data

- We can view the contents of d1

```{r}
View(d1)

colnames(d1)
```

```{r}
#looking at the first 6 rows of the data
head(d1)
```

```{r}
#looking at the bottom of the data, last 6 rows
tail(d1)
```

```{r}
#gives a brief view of the nature of the data
glimpse(d1)
```

```{r}
typeof(d1$minutes_to_nearest_facility)
```

```{r}
#checking the dimensions, gives the number of rows and columns
dim(d1)
```

```{r}
#Much more description of the data
attributes(d1)
```

```{r}
summary(d1)
```

```{r}
#checking whether the variable is character
is.character(d1$smoker)
```

```{r}
#looking at the frequencies of different levels of smokers 
table(d1$smoker)
```

```{r}
table(d1$residence)
```

- lokk at smokers by residence

```{r}
table(d1$residence, d1$smoker)
```

```{r}
table(d1$county, d1$residence, d1$smoker)
```

to make a better table

```{r}
#install.packages("arsenal")
library(arsenal)
```
```{r}
#use tableby function from "arsenal package
d3 <- tableby(county ~ residence + smoker, data = d1)

summary(d3)
```


```{r}
d4 <- tableby(residence ~ smoker, data = d1)

summary(d4)
```


```{r}
class(as.factor(d1$residence))
```

change/recode the variable residence urban - 1 and rural - 2

```{r}
d1$residence <- ifelse(d1$residence == "rural", 1, 2)

table(d1$residence)
```

reverse the process and see

```{r}
d1$residence <- ifelse(d1$residence == 1, "rural", "urban")

table(d1$residence)
```

## Select () function
- in package dplyr, helps us to select columns in a data frame

```{r}
library(dplyr)
```

- we will also use the pipe operator |> (Control + Shift + m)

```{r}
d2 <- d1 |> 
  select(county, residence, smoker) 

head(d2)
```

```{r}
d3 <- d1 |> 
  select(-c(residence, smoker))

head(d3)
```

## Merge data, d2 and d3
- we use the function merge ()
- To join the two data sets, we need to have a common column name

```{r}
d4 <-  merge(d2, d3, by = "county", by.y = "county", all.x = TRUE)
```

